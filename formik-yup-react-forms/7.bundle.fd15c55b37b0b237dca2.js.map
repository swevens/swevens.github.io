{"version":3,"sources":["webpack:///./src/components/organisms/StepA/index.js"],"names":["__webpack_require__","_formik","Yup","_lodash","_reactRedux","_actionTypes","_common","_react2","default","createElement","className","StepA","React","Component","this","props","stepAstate","firstname","lastname","title","setTouched","setFieldValue","_props","errors","touched","dirty","isEmpty","Fragment","_Header2","backAction","titles","getSectionTitles","progressPercentage","_ref","_Select2","autoFocus","options","getTitles","label","name","type","error","value","values","onBlur","setFieldTouched","onChange","placeholder","isOptional","searchable","_ref2","_Input2","handleChange","isClearable","maxlength","_ref3","_Button2","variation","key","onClick","submitForm","isValid","connect","state","views","stepA","withFormik","mapPropsToValues","validationSchema","object","shape","string","required","min","handleSubmit","_ref4","dispatch","SET_STEPA_CONTENT","payload","gotoView"],"mappings":"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","file":"7.bundle.fd15c55b37b0b237dca2.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { isEmpty } from \"lodash\";\nimport { connect } from \"react-redux\";\n\nimport Select from \"../../molecules/Select\";\nimport Input from \"../../molecules/Input\";\nimport Header from \"../../molecules/Header\";\nimport Button from \"../../atoms/Button\";\nimport { SET_STEPA_CONTENT } from \"../../../constants/actionTypes\";\nimport { getTitles, getSectionTitles } from \"../../../utils/common\";\n\nclass StepA extends React.Component {\n  componentDidMount() {\n    if (this.props.stepAstate.firstname && this.props.stepAstate.lastname && this.props.stepAstate.title) {\n      this.props.setTouched({ title: true, firstname: true, lastname: true });\n      this.props.setFieldValue(\"title\", this.props.stepAstate.title, true);\n      this.props.setFieldValue(\n        \"firstname\",\n        this.props.stepAstate.firstname,\n        true\n      );\n      this.props.setFieldValue(\"lastname\", this.props.stepAstate.lastname, true);\n    }\n  }\n\n  isValid() {\n    const { errors, touched, dirty } = this.props;\n    if (dirty && !isEmpty(touched) && isEmpty(errors)) {\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Header\n          backAction={null}\n          titles={getSectionTitles['StepA']}\n          progressPercentage={20}\n        />\n        <section className=\"grid-container fade-in\">\n          <div className=\"grid-x\">\n            <div className=\"small-3\" />\n            <div className=\"m1 small-6\">\n              <Select\n                autoFocus={true}\n                options={getTitles()}\n                label={\"TITLE\"}\n                name=\"title\"\n                type=\"text\"\n                error={this.props.errors.title}\n                touched={this.props.touched.title}\n                value={this.props.values.title}\n                onBlur={this.props.setFieldTouched}\n                onChange={this.props.setFieldValue}\n                placeholder={\"Select title\"}\n                isOptional={false}\n                searchable={false}\n              />\n            </div>\n          </div>\n          <div className=\"grid-x\">\n            <div className=\"small-3\" />\n            <div className=\"m1 small-6\">\n              <Input\n                name=\"firstname\"\n                type=\"text\"\n                label=\"FIRST NAME\"\n                value={this.props.values.firstname}\n                error={this.props.errors.firstname}\n                touched={this.props.touched.firstname}\n                onBlur={this.props.setFieldTouched}\n                onChange={this.props.handleChange}\n                placeholder=\"Enter your first name\"\n                isOptional={false}\n                isClearable={true}\n                maxlength={16}\n              />\n            </div>\n          </div>\n          <div className=\"grid-x\">\n            <div className=\"small-3\" />\n            <div className=\"m1 small-6\">\n              <Input\n                name=\"lastname\"\n                type=\"text\"\n                label=\"LAST NAME\"\n                value={this.props.values.lastname}\n                error={this.props.errors.lastname}\n                touched={this.props.touched.lastname}\n                onBlur={this.props.setFieldTouched}\n                onChange={this.props.handleChange}\n                placeholder=\"Enter your last name\"\n                isOptional={false}\n                isClearable={true}\n                maxlength={24}\n              />\n            </div>\n          </div>\n          <div className=\"grid-x m2\">\n            <div className=\"small-12 text-center\">\n              <Button\n                variation=\"flat\"\n                key=\"continue\"\n                onClick={this.props.submitForm}\n                className={this.props.isValid ? \"\" : \"invalid\"}\n              >\n                Next\n              </Button>\n            </div>\n          </div>\n        </section>\n      </React.Fragment>\n    );\n  }\n}\n\nStepA.propTypes = {\n  gotoView: PropTypes.func,\n  errors: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  title: PropTypes.string,\n  firstname: PropTypes.string,\n  lastname: PropTypes.string,\n  dirty: PropTypes.bool,\n  touched: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  values: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  setFieldTouched: PropTypes.func,\n  setFieldValue: PropTypes.func,\n  handleChange: PropTypes.func,\n  submitForm: PropTypes.func,\n  isValid: PropTypes.bool,\n  stepAstate: PropTypes.object,\n  setTouched: PropTypes.func,\n  dispatch: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n  return {\n    stepAstate: state.views.stepA\n  };\n}\n\nexport default connect(mapStateToProps)(\n  withFormik({\n    mapPropsToValues: props => ({\n      title: \"\",\n      firstname: \"\",\n      lastname: \"\"\n    }),\n    validationSchema: Yup.object().shape({\n      title: Yup.string().required(\"Required\"),\n      firstname: Yup.string().required(\"Please enter your First Name\").min(3,'Minimum 3 letters'),\n      lastname: Yup.string().required(\"Please enter your Last Name\").min(3,'Minimum 3 letters')\n    }),\n    handleSubmit: (values, { props }) => {\n      props.dispatch({\n        type: SET_STEPA_CONTENT,\n        payload: {\n          title: values.title,\n          firstname: values.firstname,\n          lastname: values.lastname\n        }\n      });\n      props.gotoView(\"StepB\");\n    }\n  })(StepA)\n);\n"],"sourceRoot":""}